//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars['ID'];
  form: Scalars['JSON'];
  values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars['JSON'];
  getStudentDocument: StudentDocument;
  getStudentList: StudentConnection;
  getTeacherDocument: TeacherDocument;
  getTeacherList: TeacherConnection;
  getParentDocument: ParentDocument;
  getParentList: ParentConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetStudentDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetStudentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetTeacherDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetTeacherListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryGetParentDocumentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGetParentListArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = StudentDocument | TeacherDocument | ParentDocument;

export type Student = {
  __typename?: 'Student';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
};

export type StudentDocument = Node & Document & {
  __typename?: 'StudentDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Student;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type StudentConnectionEdges = {
  __typename?: 'StudentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<StudentDocument>;
};

export type StudentConnection = Connection & {
  __typename?: 'StudentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<StudentConnectionEdges>>>;
};

export type Teacher = {
  __typename?: 'Teacher';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
};

export type TeacherDocument = Node & Document & {
  __typename?: 'TeacherDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Teacher;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type TeacherConnectionEdges = {
  __typename?: 'TeacherConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<TeacherDocument>;
};

export type TeacherConnection = Connection & {
  __typename?: 'TeacherConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TeacherConnectionEdges>>>;
};

export type Parent = {
  __typename?: 'Parent';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
};

export type ParentDocument = Node & Document & {
  __typename?: 'ParentDocument';
  id: Scalars['ID'];
  sys: SystemInfo;
  data: Parent;
  form: Scalars['JSON'];
  values: Scalars['JSON'];
  dataJSON: Scalars['JSON'];
};

export type ParentConnectionEdges = {
  __typename?: 'ParentConnectionEdges';
  cursor?: Maybe<Scalars['String']>;
  node?: Maybe<ParentDocument>;
};

export type ParentConnection = Connection & {
  __typename?: 'ParentConnection';
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ParentConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updateStudentDocument: StudentDocument;
  createStudentDocument: StudentDocument;
  updateTeacherDocument: TeacherDocument;
  createTeacherDocument: TeacherDocument;
  updateParentDocument: ParentDocument;
  createParentDocument: ParentDocument;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateStudentDocumentArgs = {
  relativePath: Scalars['String'];
  params: StudentMutation;
};


export type MutationCreateStudentDocumentArgs = {
  relativePath: Scalars['String'];
  params: StudentMutation;
};


export type MutationUpdateTeacherDocumentArgs = {
  relativePath: Scalars['String'];
  params: TeacherMutation;
};


export type MutationCreateTeacherDocumentArgs = {
  relativePath: Scalars['String'];
  params: TeacherMutation;
};


export type MutationUpdateParentDocumentArgs = {
  relativePath: Scalars['String'];
  params: ParentMutation;
};


export type MutationCreateParentDocumentArgs = {
  relativePath: Scalars['String'];
  params: ParentMutation;
};

export type DocumentMutation = {
  student?: InputMaybe<StudentMutation>;
  teacher?: InputMaybe<TeacherMutation>;
  parent?: InputMaybe<ParentMutation>;
};

export type StudentMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type TeacherMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type ParentMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type StudentPartsFragment = { __typename?: 'Student', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type TeacherPartsFragment = { __typename?: 'Teacher', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type ParentPartsFragment = { __typename?: 'Parent', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type GetStudentDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetStudentDocumentQuery = { __typename?: 'Query', getStudentDocument: { __typename?: 'StudentDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Student', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } };

export type GetStudentListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStudentListQuery = { __typename?: 'Query', getStudentList: { __typename?: 'StudentConnection', totalCount: number, edges?: Array<{ __typename?: 'StudentConnectionEdges', node?: { __typename?: 'StudentDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Student', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } | null } | null> | null } };

export type GetTeacherDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetTeacherDocumentQuery = { __typename?: 'Query', getTeacherDocument: { __typename?: 'TeacherDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Teacher', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } };

export type GetTeacherListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetTeacherListQuery = { __typename?: 'Query', getTeacherList: { __typename?: 'TeacherConnection', totalCount: number, edges?: Array<{ __typename?: 'TeacherConnectionEdges', node?: { __typename?: 'TeacherDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Teacher', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } | null } | null> | null } };

export type GetParentDocumentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetParentDocumentQuery = { __typename?: 'Query', getParentDocument: { __typename?: 'ParentDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Parent', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } };

export type GetParentListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetParentListQuery = { __typename?: 'Query', getParentList: { __typename?: 'ParentConnection', totalCount: number, edges?: Array<{ __typename?: 'ParentConnectionEdges', node?: { __typename?: 'ParentDocument', id: string, sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data: { __typename?: 'Parent', title?: string | null, author?: string | null, date?: string | null, body?: any | null } } | null } | null> | null } };

export const StudentPartsFragmentDoc = gql`
    fragment StudentParts on Student {
  title
  author
  date
  body
}
    `;
export const TeacherPartsFragmentDoc = gql`
    fragment TeacherParts on Teacher {
  title
  author
  date
  body
}
    `;
export const ParentPartsFragmentDoc = gql`
    fragment ParentParts on Parent {
  title
  author
  date
  body
}
    `;
export const GetStudentDocumentDocument = gql`
    query getStudentDocument($relativePath: String!) {
  getStudentDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...StudentParts
    }
  }
}
    ${StudentPartsFragmentDoc}`;
export const GetStudentListDocument = gql`
    query getStudentList {
  getStudentList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...StudentParts
        }
      }
    }
  }
}
    ${StudentPartsFragmentDoc}`;
export const GetTeacherDocumentDocument = gql`
    query getTeacherDocument($relativePath: String!) {
  getTeacherDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...TeacherParts
    }
  }
}
    ${TeacherPartsFragmentDoc}`;
export const GetTeacherListDocument = gql`
    query getTeacherList {
  getTeacherList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...TeacherParts
        }
      }
    }
  }
}
    ${TeacherPartsFragmentDoc}`;
export const GetParentDocumentDocument = gql`
    query getParentDocument($relativePath: String!) {
  getParentDocument(relativePath: $relativePath) {
    sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    data {
      ...ParentParts
    }
  }
}
    ${ParentPartsFragmentDoc}`;
export const GetParentListDocument = gql`
    query getParentList {
  getParentList {
    totalCount
    edges {
      node {
        id
        sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        data {
          ...ParentParts
        }
      }
    }
  }
}
    ${ParentPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getStudentDocument(variables: GetStudentDocumentQueryVariables, options?: C): Promise<{data: GetStudentDocumentQuery, variables: GetStudentDocumentQueryVariables, query: string}> {
        return requester<{data: GetStudentDocumentQuery, variables: GetStudentDocumentQueryVariables, query: string}, GetStudentDocumentQueryVariables>(GetStudentDocumentDocument, variables, options);
      },
    getStudentList(variables?: GetStudentListQueryVariables, options?: C): Promise<{data: GetStudentListQuery, variables: GetStudentListQueryVariables, query: string}> {
        return requester<{data: GetStudentListQuery, variables: GetStudentListQueryVariables, query: string}, GetStudentListQueryVariables>(GetStudentListDocument, variables, options);
      },
    getTeacherDocument(variables: GetTeacherDocumentQueryVariables, options?: C): Promise<{data: GetTeacherDocumentQuery, variables: GetTeacherDocumentQueryVariables, query: string}> {
        return requester<{data: GetTeacherDocumentQuery, variables: GetTeacherDocumentQueryVariables, query: string}, GetTeacherDocumentQueryVariables>(GetTeacherDocumentDocument, variables, options);
      },
    getTeacherList(variables?: GetTeacherListQueryVariables, options?: C): Promise<{data: GetTeacherListQuery, variables: GetTeacherListQueryVariables, query: string}> {
        return requester<{data: GetTeacherListQuery, variables: GetTeacherListQueryVariables, query: string}, GetTeacherListQueryVariables>(GetTeacherListDocument, variables, options);
      },
    getParentDocument(variables: GetParentDocumentQueryVariables, options?: C): Promise<{data: GetParentDocumentQuery, variables: GetParentDocumentQueryVariables, query: string}> {
        return requester<{data: GetParentDocumentQuery, variables: GetParentDocumentQueryVariables, query: string}, GetParentDocumentQueryVariables>(GetParentDocumentDocument, variables, options);
      },
    getParentList(variables?: GetParentListQueryVariables, options?: C): Promise<{data: GetParentListQuery, variables: GetParentListQueryVariables, query: string}> {
        return requester<{data: GetParentListQuery, variables: GetParentListQueryVariables, query: string}, GetParentListQueryVariables>(GetParentListDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

