//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  student: Student;
  studentConnection: StudentConnection;
  teacher: Teacher;
  teacherConnection: TeacherConnection;
  parent: Parent;
  parentConnection: ParentConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryStudentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryStudentConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryTeacherArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryTeacherConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};


export type QueryParentArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryParentConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Student | Teacher | Parent;

export type Student = Node & Document & {
  __typename?: 'Student';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StudentConnectionEdges = {
  __typename?: 'StudentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Student>;
};

export type StudentConnection = Connection & {
  __typename?: 'StudentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<StudentConnectionEdges>>>;
};

export type Teacher = Node & Document & {
  __typename?: 'Teacher';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type TeacherConnectionEdges = {
  __typename?: 'TeacherConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Teacher>;
};

export type TeacherConnection = Connection & {
  __typename?: 'TeacherConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<TeacherConnectionEdges>>>;
};

export type Parent = Node & Document & {
  __typename?: 'Parent';
  title?: Maybe<Scalars['String']>;
  author?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type ParentConnectionEdges = {
  __typename?: 'ParentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Parent>;
};

export type ParentConnection = Connection & {
  __typename?: 'ParentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ParentConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateStudent: Student;
  createStudent: Student;
  updateTeacher: Teacher;
  createTeacher: Teacher;
  updateParent: Parent;
  createParent: Parent;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateStudentArgs = {
  relativePath: Scalars['String'];
  params: StudentMutation;
};


export type MutationCreateStudentArgs = {
  relativePath: Scalars['String'];
  params: StudentMutation;
};


export type MutationUpdateTeacherArgs = {
  relativePath: Scalars['String'];
  params: TeacherMutation;
};


export type MutationCreateTeacherArgs = {
  relativePath: Scalars['String'];
  params: TeacherMutation;
};


export type MutationUpdateParentArgs = {
  relativePath: Scalars['String'];
  params: ParentMutation;
};


export type MutationCreateParentArgs = {
  relativePath: Scalars['String'];
  params: ParentMutation;
};

export type DocumentMutation = {
  student?: InputMaybe<StudentMutation>;
  teacher?: InputMaybe<TeacherMutation>;
  parent?: InputMaybe<ParentMutation>;
};

export type StudentMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type TeacherMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type ParentMutation = {
  title?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type StudentPartsFragment = { __typename?: 'Student', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type TeacherPartsFragment = { __typename?: 'Teacher', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type ParentPartsFragment = { __typename?: 'Parent', title?: string | null, author?: string | null, date?: string | null, body?: any | null };

export type StudentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type StudentQuery = { __typename?: 'Query', student: { __typename?: 'Student', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type StudentConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type StudentConnectionQuery = { __typename?: 'Query', studentConnection: { __typename?: 'StudentConnection', totalCount: number, edges?: Array<{ __typename?: 'StudentConnectionEdges', node?: { __typename?: 'Student', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type TeacherQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type TeacherQuery = { __typename?: 'Query', teacher: { __typename?: 'Teacher', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type TeacherConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type TeacherConnectionQuery = { __typename?: 'Query', teacherConnection: { __typename?: 'TeacherConnection', totalCount: number, edges?: Array<{ __typename?: 'TeacherConnectionEdges', node?: { __typename?: 'Teacher', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ParentQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ParentQuery = { __typename?: 'Query', parent: { __typename?: 'Parent', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ParentConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type ParentConnectionQuery = { __typename?: 'Query', parentConnection: { __typename?: 'ParentConnection', totalCount: number, edges?: Array<{ __typename?: 'ParentConnectionEdges', node?: { __typename?: 'Parent', id: string, title?: string | null, author?: string | null, date?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const StudentPartsFragmentDoc = gql`
    fragment StudentParts on Student {
  title
  author
  date
  body
}
    `;
export const TeacherPartsFragmentDoc = gql`
    fragment TeacherParts on Teacher {
  title
  author
  date
  body
}
    `;
export const ParentPartsFragmentDoc = gql`
    fragment ParentParts on Parent {
  title
  author
  date
  body
}
    `;
export const StudentDocument = gql`
    query student($relativePath: String!) {
  student(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...StudentParts
  }
}
    ${StudentPartsFragmentDoc}`;
export const StudentConnectionDocument = gql`
    query studentConnection {
  studentConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...StudentParts
      }
    }
  }
}
    ${StudentPartsFragmentDoc}`;
export const TeacherDocument = gql`
    query teacher($relativePath: String!) {
  teacher(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...TeacherParts
  }
}
    ${TeacherPartsFragmentDoc}`;
export const TeacherConnectionDocument = gql`
    query teacherConnection {
  teacherConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...TeacherParts
      }
    }
  }
}
    ${TeacherPartsFragmentDoc}`;
export const ParentDocument = gql`
    query parent($relativePath: String!) {
  parent(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...ParentParts
  }
}
    ${ParentPartsFragmentDoc}`;
export const ParentConnectionDocument = gql`
    query parentConnection {
  parentConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...ParentParts
      }
    }
  }
}
    ${ParentPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      student(variables: StudentQueryVariables, options?: C): Promise<{data: StudentQuery, variables: StudentQueryVariables, query: string}> {
        return requester<{data: StudentQuery, variables: StudentQueryVariables, query: string}, StudentQueryVariables>(StudentDocument, variables, options);
      },
    studentConnection(variables?: StudentConnectionQueryVariables, options?: C): Promise<{data: StudentConnectionQuery, variables: StudentConnectionQueryVariables, query: string}> {
        return requester<{data: StudentConnectionQuery, variables: StudentConnectionQueryVariables, query: string}, StudentConnectionQueryVariables>(StudentConnectionDocument, variables, options);
      },
    teacher(variables: TeacherQueryVariables, options?: C): Promise<{data: TeacherQuery, variables: TeacherQueryVariables, query: string}> {
        return requester<{data: TeacherQuery, variables: TeacherQueryVariables, query: string}, TeacherQueryVariables>(TeacherDocument, variables, options);
      },
    teacherConnection(variables?: TeacherConnectionQueryVariables, options?: C): Promise<{data: TeacherConnectionQuery, variables: TeacherConnectionQueryVariables, query: string}> {
        return requester<{data: TeacherConnectionQuery, variables: TeacherConnectionQueryVariables, query: string}, TeacherConnectionQueryVariables>(TeacherConnectionDocument, variables, options);
      },
    parent(variables: ParentQueryVariables, options?: C): Promise<{data: ParentQuery, variables: ParentQueryVariables, query: string}> {
        return requester<{data: ParentQuery, variables: ParentQueryVariables, query: string}, ParentQueryVariables>(ParentDocument, variables, options);
      },
    parentConnection(variables?: ParentConnectionQueryVariables, options?: C): Promise<{data: ParentConnectionQuery, variables: ParentConnectionQueryVariables, query: string}> {
        return requester<{data: ParentConnectionQuery, variables: ParentConnectionQueryVariables, query: string}, ParentConnectionQueryVariables>(ParentConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

