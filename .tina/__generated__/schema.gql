# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
  getDocumentFields: JSON!
  getStudentDocument(relativePath: String): StudentDocument!
  getStudentList(before: String, after: String, first: Float, last: Float, sort: String): StudentConnection!
  getTeacherDocument(relativePath: String): TeacherDocument!
  getTeacherList(before: String, after: String, first: Float, last: Float, sort: String): TeacherConnection!
  getParentDocument(relativePath: String): ParentDocument!
  getParentList(before: String, after: String, first: Float, last: Float, sort: String): ParentConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = StudentDocument | TeacherDocument | ParentDocument

type Student {
  title: String
  author: String
  date: String
  body: JSON
}

type StudentDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Student!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type StudentConnectionEdges {
  cursor: String
  node: StudentDocument
}

type StudentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [StudentConnectionEdges]
}

type Teacher {
  title: String
  author: String
  date: String
  body: JSON
}

type TeacherDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Teacher!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type TeacherConnectionEdges {
  cursor: String
  node: TeacherDocument
}

type TeacherConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [TeacherConnectionEdges]
}

type Parent {
  title: String
  author: String
  date: String
  body: JSON
}

type ParentDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Parent!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ParentConnectionEdges {
  cursor: String
  node: ParentDocument
}

type ParentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ParentConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateStudentDocument(relativePath: String!, params: StudentMutation!): StudentDocument!
  createStudentDocument(relativePath: String!, params: StudentMutation!): StudentDocument!
  updateTeacherDocument(relativePath: String!, params: TeacherMutation!): TeacherDocument!
  createTeacherDocument(relativePath: String!, params: TeacherMutation!): TeacherDocument!
  updateParentDocument(relativePath: String!, params: ParentMutation!): ParentDocument!
  createParentDocument(relativePath: String!, params: ParentMutation!): ParentDocument!
}

input DocumentMutation {
  student: StudentMutation
  teacher: TeacherMutation
  parent: ParentMutation
}

input StudentMutation {
  title: String
  author: String
  date: String
  body: JSON
}

input TeacherMutation {
  title: String
  author: String
  date: String
  body: JSON
}

input ParentMutation {
  title: String
  author: String
  date: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
  